import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.GregorianCalendar;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

/* 
Automated Wyoming Radiosondes Parser - Crae Sosa 
Selected Stations 
1. HGHT = 61m - 72694 SLE Salem Observations
2. HGHT = 790m - 72451 DDC Dodge City(Awos) Observations at 00Z 15 Mar 2014
3. HGHT = 1625m - 72469 DNR Denver Observations at 00Z 15 Mar 2014
 */

public class WyomingDownload {
	static PrintWriter ind;
	static String directory = "/Users/craesosa/Dropbox/Northrop/WyomingRadiosondes/Java/WyomingSam/wyoming_downloads/";
	static String linkPREFIX = "http://weather.uwyo.edu/cgi-bin/sounding?";
	static String region = "region=naconf";
	static String typeText = "&TYPE=TEXT%3ALIST";
	// varied
	static String yr = "&YEAR=";
	static String mon = "&MONTH=";
	static String from = "&FROM=all";
	static String SN = "&STNM=";
	// resolution that files split into - the commands are: year, month, 12hr
	static String mode = "12hr";

	public static void main(String args[]) {
		String[] stationNum = { "72694", "72451", "72469"};
		String[] stations = { "72694SLESalem","72451DDCDodgeCity","72469DNRDenver"};
		
		String[] years = {"2009"};
		String[] months = { "01" };
		// Loop over the stations once you have em
		for (int k = 0; k < stationNum.length; k++) {
			for (int i = 0; i < years.length; i++) {
				for (int j = 0; j < months.length; j++) {
					// Assembling link
					String linkGen = linkPREFIX + region + typeText + yr + years[i] + mon + months[j] + from + SN + stationNum[k];
					System.out.println(linkGen);
					wyomingSite(linkGen, years[i], months[j], stationNum[k], stations[k]);
				}
			}
		}
	}

	public static void wyomingSite(String link, String years, String months,
			String stationNum, String stations) {
		try {
			DefaultHttpClient client = new DefaultHttpClient();
			HttpGet get = new HttpGet(link);
			HttpResponse response = client.execute(get);
			BufferedReader in = new BufferedReader(new InputStreamReader(
					response.getEntity().getContent()));
			String line = "";
			//We don't really use month mode
			if (mode.equals("month")) {
				ind = new PrintWriter(new FileWriter(directory + stationNum + "_" + years + months + ".txt"));
				while ((line = in.readLine()) != null) {

					boolean cL = containsLetter(line);
					if (cL == true | line.contains("--") | line.isEmpty()) {
					} else {
						ind.println(line);
					}
				}
				in.close();
				ind.close();
			} else if (mode.equals("12hr")) {
				while ((line = in.readLine()) != null) {
					if (line.replaceAll(" ", "").contains(stations)) {
//						String timestamp = line;
//						System.out.println(timestamp);
//						String[] timestamp_arr = timestamp.split(" ");
//						int ts_len = timestamp_arr.length;
//						int time_index = ts_len - 4;
//						int day_index = ts_len - 3;
//
//						String time = timestamp_arr[time_index];
//						String day = timestamp_arr[day_index];
//
//						String jd = Day2julianDay(day, months, years);
//						ind = new PrintWriter(new FileWriter(directory + stations + "." + years + jd + "." + time + ".csv"));

						String stationNumName = line.substring(4,9).trim();
						
						String dateInfo = line.substring(line.length()-20,line.length()-5);
						
						

						ind = new PrintWriter(new FileWriter(stationNumName + "." + dateInfo + ".csv"));
						
					} else if (line.contains("Station information and sounding indices")) {
						ind.close();
					}

					boolean cL = containsLetter(line);
					if (cL == true | line.contains("--") | line.isEmpty()) {
						
					} else {
						//44 is the length of the substring 
						String lineOriginal = line.substring(0,44);
						line = lineOriginal.substring(0,7) + "," + 
							   lineOriginal.substring(7,14) + "," + 
							   lineOriginal.substring(14,21) + "," + 
							   lineOriginal.substring(21,28) + "," +
							   lineOriginal.substring(28,35) + "," + 
							   lineOriginal.substring(35,lineOriginal.length());
						
//						String checkWhiteSpaces = line.trim();
						boolean shouldAllowLine = true; 
						String[] checkLine = line.split(",");
						for(String bitToCheck:checkLine){
							if(bitToCheck.trim().length()>0){

							}else{
								shouldAllowLine = false;
								break;
							}
						}
						
						if(shouldAllowLine){
							ind.println(line);
						}
					}
				}
				in.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static boolean containsLetter(String s) {
		if (s == null)
			return false;
		boolean letterFound = false;
		for (int i = 0; !letterFound && i < s.length(); i++)
			letterFound = letterFound || Character.isLetter(s.charAt(i));
		return letterFound;
	}

	public static String Day2julianDay(String DOM, String MON, String YEAR) {
		int intDOM = Integer.parseInt(DOM);
		int intMON = Integer.parseInt(MON) - 1; // -1 because months start at 0;
		int intYEAR = Integer.parseInt(YEAR);

		GregorianCalendar gc = new GregorianCalendar();
		gc.set(GregorianCalendar.DAY_OF_MONTH, intDOM);
		gc.set(GregorianCalendar.MONTH, intMON);
		gc.set(GregorianCalendar.YEAR, intYEAR);
		int intDOY = gc.get(GregorianCalendar.DAY_OF_YEAR);

		return String.format("%03d", intDOY);
	}
}
